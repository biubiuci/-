// Generated by gencpp from file blueprintlab_reachsystem_ros_messages/single_int.msg
// DO NOT EDIT!


#ifndef BLUEPRINTLAB_REACHSYSTEM_ROS_MESSAGES_MESSAGE_SINGLE_INT_H
#define BLUEPRINTLAB_REACHSYSTEM_ROS_MESSAGES_MESSAGE_SINGLE_INT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blueprintlab_reachsystem_ros_messages
{
template <class ContainerAllocator>
struct single_int_
{
  typedef single_int_<ContainerAllocator> Type;

  single_int_()
    : stamp()
    , device_id(0)
    , value(0)  {
    }
  single_int_(const ContainerAllocator& _alloc)
    : stamp()
    , device_id(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _device_id_type;
  _device_id_type device_id;

   typedef int32_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> const> ConstPtr;

}; // struct single_int_

typedef ::blueprintlab_reachsystem_ros_messages::single_int_<std::allocator<void> > single_int;

typedef boost::shared_ptr< ::blueprintlab_reachsystem_ros_messages::single_int > single_intPtr;
typedef boost::shared_ptr< ::blueprintlab_reachsystem_ros_messages::single_int const> single_intConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator1> & lhs, const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.device_id == rhs.device_id &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator1> & lhs, const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace blueprintlab_reachsystem_ros_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29dcc1b9012662f9ba2eec6d39f61407";
  }

  static const char* value(const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29dcc1b9012662f9ULL;
  static const uint64_t static_value2 = 0xba2eec6d39f61407ULL;
};

template<class ContainerAllocator>
struct DataType< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blueprintlab_reachsystem_ros_messages/single_int";
  }

  static const char* value(const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"uint8 device_id\n"
"int32 value\n"
;
  }

  static const char* value(const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.device_id);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct single_int_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blueprintlab_reachsystem_ros_messages::single_int_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_id);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEPRINTLAB_REACHSYSTEM_ROS_MESSAGES_MESSAGE_SINGLE_INT_H
